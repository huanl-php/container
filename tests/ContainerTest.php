<?php

namespace HuanL\Container\Tests;

use HuanL\Container\Container;
use PHPUnit\Framework\TestCase;

class ContainerTest extends TestCase {
    /**
     * @var Container
     */
    private $container;

    protected function setUp()/* The :void return type declaration that should be here would cause a BC issue */ {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->container = new Container();
    }

    //测试绑定
    public function testBind() {
        $this->container->bind(classA::class);
        $classA = $this->container->make(classA::class);
        $this->assertInstanceOf(classA::class, $classA);
    }

    /**
     * 测试依赖
     * @param $classA
     *
     * @depends testBind
     */
    public function testInjection($classA) {
        $this->container->bind(classB::class);
        $classB = $this->container->make(classB::class);
        $this->assertInstanceOf(classB::class, $classB);
        $this->assertEquals($classB->test(), 1);
    }

    /**
     * 测试唯一
     */
    public function testSingleton() {
        $this->container->singleton(classA::class);
        $classB = $this->container->make(classB::class,['def'=>0]);
        $this->assertInstanceOf(classB::class, $classB);
        $this->assertEquals($classB->test(), 1);

        $classB2 = $this->container->make(classB::class,['def'=>2]);
        $this->assertInstanceOf(classB::class, $classB2);
        $this->assertEquals($classB2->test(), 4);
    }

    /**
     * 测试实例
     */
    public function testInstance() {
        $this->container->instance('ins_one', new classB(new classA(),2));
       $classB= $this->container->make('ins_one');
       $this->assertEquals($classB->test(),3);
    }
}

class classA {
    private $a;

    public function __construct() {
        $this->a++;
    }

    public function add() {
        return $this->a++;
    }
}

class classB {
    /**
     * @var classA
     */
    private $classA;

    private $def;

    public function __construct(classA $classA, $def = 1) {
        $this->classA = $classA;
        $this->def = $def;
    }

    public function test() {
        return $this->def + $this->classA->add();
    }
}